#!/usr/bin/env -S fish -PN


set -l Here ( status filename | path dirname )


set -g GlobalArgv $argv

function ForceMode
    return ( test "$GlobalArgv[1]" = "force" )
end

if ForceMode
    echo ":::::: ForceMode is on"
end


set -l ScriptsDir "$Here/scripts"

if not test -d "$ScriptsDir"
    echo "Missing ScriptsDir"
    exit ( false )
end


set -l SSHConfFile "$HOME/.ssh/config"

if not test -f "$SSHConfFile"
    echo "Missing .ssh/config"
    exit ( false )
end

set -l Remotes ( string match -rg '^Host (?<__host>[a-z-]+)$' < "$SSHConfFile" | string match --invert "localhost" )

printf ":::::: Found remote <%s>\n" $Remotes


set -l PortableService ".#abcd"

set -l DiskImageName 'abcd_dev.raw'
set -l DiskImageFullPath
set -l BuiltDiskImage

set -l Portablectl "portablectl"

set -l Attach \
    $Portablectl attach --profile trusted --now --enable

set -l Detach $Portablectl detach --now




echo ":::::: Sanity checks"

if not command --query "ssh"
    # Having ssh implies having scp
    echo "\"ssh\" not found"
    exit ( false )
end

for remote in $Remotes

    echo "::: Check portablectl on <$remote>"

    # TODO: remove
    # ssh "$remote" $Portablectl --version 1> /dev/null 2>&1

    if test $status != 0
        echo "::: portablectl now available on <$remote>"
        exit ( false )
    end

end

echo "::::::"




echo ":::::: Build portable service"

command nix build $PortableService \
    --impure \
    --print-build-logs \
    --print-out-paths \
    --no-link \
    | read BuiltDiskImage

if test $status != 0
    echo "::: Disk image build failed"
    exit ( false )
end

set DiskImageFullPath "$BuiltDiskImage/$DiskImageName"

echo "::: Built <$BuiltDiskImage>"
echo "::: Disk image full path <$DiskImageFullPath>"

echo "::::::"




echo ":::::: Transfer assets to remote servers"

for remote in $Remotes

    echo "::: Remote is <$remote>"

    set -l StatusAccu 0


    # Add '&' to enable parallel trasnfering if the
    # condition of upload bandwidth allows.
    scp "$DiskImageFullPath" "$remote":

    set StatusAccu ( math $StatusAccu + $status )


    # nix store quirks
    ssh "$remote" chmod 0644 "$DiskImageName"

    set StatusAccu ( math $StatusAccu + $status )


    scp "$ScriptsDir"/* "$remote":

    set StatusAccu ( math $StatusAccu + $status )


    if test $StatusAccu != 0
        echo "::: Transfer failed for remote <$remote>"
        exit ( false )
    end

end

while true
    jobs 1> /dev/null 2>&1; or break
end

echo "::::::"




echo ":::::: Stop old services"

for remote in $Remotes

    echo "::: Remote is <$remote>"

    ssh "$remote" $Detach ./"$DiskImageName"

    if test $status != 0 && not ForceMode
        echo "::: Failed on <$remote>"
        exit ( false )
    end

end




echo ":::::: Activate new service"

for remote in $Remotes

    echo "::: Remote is <$remote>"

    ssh "$remote" $Attach ./"$DiskImageName"

    if test $status != 0 && not ForceMode
        echo "::: Failed on <$remote>"
        exit ( false )
    end

end

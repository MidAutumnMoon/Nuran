#!/usr/bin/env -S fish -PN

#
# Positional script options
#
# 1: path leading to a nvfetcher config file
# 2: (optional) "force" to ignore pins during updating
#

if test ( count $argv ) -lt 1
    echo "Not enough cmdline options"
    exit ( false )
end

set -l Config ( cat "$argv[1]" | string collect )

set -l ForceMode "$argv[2]"


#
# Prepare env
#

set -l FishPath ( status fish-path )

set -l ScriptPath ( status filename | path resolve )

set -l ScriptDir ( path dirname -- "$ScriptPath" )

set -l SourceDir ( path resolve -- "$ScriptDir/../__sources" )


#
# Enter devshell
#

if not set --query NvfetcherDevshell

    set -lx NvfetcherDevshell ( true )

    nix develop .#nuclage -c "$FishPath" "$ScriptPath" $argv

    exit $status

end


if test $ForceMode = "force"

    set Config "$( printf "$Config" | sed '/^pinned/d' )"

end


#
# Remove stale files
#

find "$SourceDir" -mindepth 1 ! -name 'generated.*' -delete


#
# Add Github token
#

set -l Keyfile ( mktemp --suffix ".toml" )
set -l NvfetcherKeyfileOption

set -l GithubTokenFile
set -l GithubToken

if set --query XDG_CONFIG_HOME
    set GithubTokenFile "$XDG_CONFIG_HOME/nvfetcher/github_token"
else
    set GithubTokenFile "$HOME/.config/nvfetcher/github_token"
end

if not test -f "$GithubTokenFile"
    echo "Put Github access token in <$GithubTokenFile>"
    exit ( false )
end

set GithubToken ( tr -cd '[:print:]' < "$GithubTokenFile" )

printf "%s\n" \
    "[keys]" \
    "github = \"$GithubToken\"" > "$Keyfile"

set -a NvfetcherKeyfileOption "--keyfile" "$Keyfile"


#
# Run nvfetcher
#

nvfetcher \
    --config ( printf "$Config" | psub ) \
    --build-dir "$SourceDir" \
    --retry 8 \
    -j 8 \
    $NvfetcherKeyfileOption


#
# Cleanup
#

rm "$Keyfile"
